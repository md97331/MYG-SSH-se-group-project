name: Backend CI

on:
  push:
    paths:
      - 'server/**'
  pull_request:
    paths:
      - 'server/**'

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_USER: ${{ secrets.DB_APP_USER }}
          MYSQL_PASSWORD: ${{ secrets.DB_APP_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'  # Specify your Python version

    - name: Install Dependencies
      run: |
        cd server
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for MySQL to be Ready
      run: |
        until mysqladmin ping -h "localhost" --silent; do
          echo "Waiting for MySQL..."
          sleep 5
        done

    - name: Set Environment Variables
      run: |
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV
        echo "DB_USER=${{ secrets.DB_APP_USER }}" >> $GITHUB_ENV
        echo "DB_PASSWORD=${{ secrets.DB_APP_PASSWORD }}" >> $GITHUB_ENV
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
        echo "FLASK_ENV=${{ secrets.FLASK_ENV }}" >> $GITHUB_ENV
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV

    - name: Apply Database Migrations
      run: |
        cd server
        source venv/bin/activate
        # Assuming you are using Flask-Migrate
        flask db upgrade

    - name: Run Tests
      run: |
        cd server
        source venv/bin/activate
        python -m unittest discover -s tests

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: backend-test-results
        path: server/tests/results/
